package app

import "fmt"
import "github.com/cufee/shopping-list/prisma/db"
import "github.com/cufee/shopping-list/internal/templates/componenets/common"
import "github.com/cufee/shopping-list/internal/templates/componenets/group"
import "github.com/cufee/shopping-list/internal/templates/componenets/tags"

type ManageGroup struct {
	Group    *db.GroupModel
	Lists    []db.ListModel
	ItemTags []db.ItemTagModel
	Members  []db.UserModel
	Invites  []db.GroupInviteModel
}

templ (props ManageGroup) Render() {
	@common.PageHeader(common.BreadcrumbsTitle(
		[]common.BreadCrumb{
			{Label: "Groups", Href: "/app"},
			{Label: props.Group.Name, Href: fmt.Sprintf("/app/group/%s", props.Group.ID)},
			{Label: "Manage"},
		},
	), common.WithDescription(props.Group.Desc))
	<div class="divider"></div>
	<div class="flex flex-col gap-4">
		@ManageGroupTags(props.Group.ID, props.ItemTags)
		<div class="flex flex-col gap-2">
			<span class="font-bold text-xl">
				Current Members
			</span>
			<div class="flex flex-row gap-2 flex-wrap">
				for _, member := range props.Members {
					@group.MemberCard(&member, props.Group.OwnerID != member.ID)
				}
			</div>
		</div>
		<div class="flex flex-col gap-2">
			<span class="font-bold text-xl">
				Active Invites
			</span>
			<div class="flex flex-row gap-2 flex-wrap" id="group-invites-conteainer">
				if len(props.Invites) < 1 {
					<span class="bg-base-200 rounded-xl py-2 px-4 grow text-center" id="group-no-invites-card">
						there are no active invites
					</span>
				} else {
					for _, invite := range props.Invites {
						@group.InviteCard(&invite)
					}
				}
			</div>
			<div class="flex justify-center">
				<button
					class="btn btn-link btn-lg"
					hx-trigger="click"
					hx-swap="beforeend"
					hx-target="#group-invites-conteainer"
					hx-post={ fmt.Sprintf("/api/groups/%s/invites", props.Group.ID) }
					hx-on::after-request="if(event.detail.xhr.status.toString().startsWith('2'))document.getElementById('group-no-invites-card')?.remove()"
				>
					create a new invite
				</button>
			</div>
		</div>
	</div>
}

templ ManageGroupTags(groupID string, groupTags []db.ItemTagModel) {
	<div class="flex flex-col gap-2" id="manage-group-tags">
		<span class="font-bold text-xl">
			Item Tags
		</span>
		<div class="flex flex-row gap-2 flex-wrap items-center">
			for _, tag := range groupTags {
				@tags.ItemTag(groupID, tag)
			}
			@tags.CreateItemTagDialog("#manage-group-tags", groupID, false, nil, nil)
		</div>
	</div>
}

type ManageList struct {
	Group *db.GroupModel
	List  *db.ListModel
	Items []db.ListItemModel
}

templ (props ManageList) Render() {
	@common.PageHeader(common.BreadcrumbsTitle(
		[]common.BreadCrumb{
			{Label: "Groups", Href: "/app"},
			{Label: props.Group.Name, Href: fmt.Sprintf("/app/group/%s", props.Group.ID)},
			{Label: props.List.Name, Href: fmt.Sprintf("/app/group/%s/list/%s", props.Group.ID, props.List.ID)},
			{Label: "Manage"},
		},
	), common.WithDescription(props.List.Desc))
	<div class="divider"></div>
	Manage List
}
