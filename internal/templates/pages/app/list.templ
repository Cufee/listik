package app

import "github.com/cufee/shopping-list/prisma/db"
import "github.com/cufee/shopping-list/internal/templates/componenets"
import "github.com/cufee/shopping-list/internal/templates/componenets/common"
import "fmt"
import "github.com/cufee/shopping-list/internal/templates/componenets/list"
import "github.com/cufee/shopping-list/internal/logic"

type List struct {
	List  *db.ListModel
	Group *db.GroupModel
	Items []db.ListItemModel
}

templ (props List) Render() {
	@common.PageHeader(common.BreadcrumbsTitle(
		[]common.BreadCrumb{
			{Label: "Groups", Href: "/app"},
			{Label: props.Group.Name, Href: fmt.Sprintf("/app/group/%s", props.List.GroupID)},
			{Label: props.List.Name},
		},
	), common.WithDescription(props.List.Desc), completeListButton(props.Group.ID, props.List.ID, props.List.Complete))
	<div class="divider"></div>
	<div class="flex flex-col gap-4">
		<div id="list-items" class="flex flex-col gap-1">
			if len(props.Items) <1 {
				<div class="flex items-center justify-center font-bold text-base-300" id="list-empty-hint">
					nothing here just yet
				</div>
			}
			for _, item := range props.Items {
				@list.ListItem{Item: &item, GroupID: props.Group.ID, Disabled: props.List.Complete}.Render()
			}
		</div>
		if !props.List.Complete {
			@list.NewListItem(props.List.GroupID, props.List.ID, "list-items", nil, nil)
		}
	</div>
}

templ completeListButton(groupId, listId string, complete bool) {
	<div>
		<div class="tooltip tooltip-left" data-tip={ logic.StringIfElse(complete, "Mark not complete", "Mark complete") }>
			@common.Button("btn-square", logic.StringIfElse(complete, "btn-info", "btn-neutral")).Attrs(templ.Attributes{
				"hx-swap":    "outerHTML",
				"hx-target":  "main",
				"hx-select":  "main",
				"hx-trigger": "click",
				"hx-patch":   fmt.Sprintf("/api/groups/%s/lists/%s/complete?checked=%t", groupId, listId, !complete),
			}).Render() {
				@components.IconCheckCircled()
			}
		</div>
	</div>
}
