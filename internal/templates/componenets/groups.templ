package components

import "github.com/cufee/shopping-list/prisma/db"
import "github.com/cufee/shopping-list/internal/templates/componenets/common"

type CreateGroupDialog struct {
	Header string
	Errors map[string]string
	Inputs map[string]string

	Dialog
}

func (d *CreateGroupDialog) ID() string {
	if d.id == "" {
		return "create-group-dialog"
	}
	return d.id
}

templ createGroupBody(selector string, inputs, errors map[string]string) {
	<form autocomplete="off" class="flex flex-col gap-6 form-control">
		<fieldset class="flex flex-col gap-2">
			<div class="form-control">
				<div class="label">
					<span class="label-text-alt text-lg">name</span>
				</div>
				<input class="input input-bordered grow" type="text" value={ inputs["name"] } name="name" placeholder="my awesome group to organize lists" aria-label="group name"/>
				if err, ok := errors["name"]; ok {
					<div class="label">
						<span class="label-text-alt text-error">{ err }</span>
					</div>
				}
			</div>
			<div class="form-control">
				<div class="label flex flex-row justify-between">
					<span class="label-text-alt text-lg">description</span>
					<span class="badge badge-accent">optional</span>
				</div>
				<textarea class="textarea textarea-bordered" type="text" name="description" placeholder="family shoppoing lists go here" aria-label="group description">{ inputs["description"] }</textarea>
				if err, ok :=  errors["description"]; ok {
					<div class="label">
						<span class="label-text-alt text-error">{ err }</span>
					</div>
				}
			</div>
		</fieldset>
		@common.Button().Attrs(templ.Attributes{
			"hx-post":    "/api/groups/",
			"hx-trigger": "click", "hx-target": selector, "hx-select": selector, "hx-swap": "outerHTML",
		}).Primary() {
			create a new group
		}
	</form>
	<div class="flex flex-col items-center gap-1">
		<div class="divider my-1"></div>
		<span class="">
			groups can include many lists. once a group is created, you will be able to manage who can see the lists inside.
		</span>
	</div>
}

func (dialog CreateGroupDialog) Render(button templ.Component) templ.Component {
	dialog.Body = createGroupBody("#"+dialog.ID(), dialog.Inputs, dialog.Errors)
	dialog.ActionButton = button
	return dialog.Dialog.Render()
}

templ GroupCard(group db.GroupModel) {
	@Card{
		Title: group.Name,
		Body:  groupCardBody(group),
	}.Render()
}

templ groupCardBody(group db.GroupModel) {
	<div class="flex flex-col gap-3 justify-between grow">
		<span class="text-lg">
			if desc, ok := group.Desc(); ok && desc != "" {
				{ desc }
			} else {
				...
			}
		</span>
		<span class="text-sm">
			{ group.CreatedAt.String() }
		</span>
	</div>
}
