package list

import "github.com/cufee/shopping-list/prisma/db"
import "fmt"
import "github.com/cufee/shopping-list/internal/templates/componenets/common"
import "github.com/cufee/shopping-list/internal/logic"
import "github.com/cufee/shopping-list/internal/templates/componenets"
import "github.com/cufee/shopping-list/internal/templates/componenets/form"

type ListItem struct {
	Item     *db.ListItemModel
	GroupID  string
	Disabled bool
	ViewMode bool
}

func conditionalClass(condition bool, class string) string {
	if condition {
		return class
	}
	return ""
}

templ (props ListItem) Render() {
	<div class="w-full join flex flex-row" id={ "list-item-" + props.Item.ID }>
		@common.Button("join-item shrink grow flex flex-row flex-nowrap gap-2 justify-start items-center").Attrs(templ.Attributes{
			"disabled":             props.Disabled,
			"hx-target":            "#list-items",
			"hx-selector":          "#list-item-" + props.Item.ID,
			"hx-on::after-request": "this.parentElement?.remove()",
			"hx-swap":              logic.StringIfElse(props.Item.Checked, "afterbegin", "beforeend"),
			"hx-put":               fmt.Sprintf("/api/groups/%s/lists/%s/items/%s/checked/?checked=%t&mode=%s", props.GroupID, props.Item.ListID, props.Item.ID, !props.Item.Checked, logic.StringIfElse(props.ViewMode, "view", "")),
		}).Render() {
			<input name="checked" type="checkbox" checked?={ props.Item.Checked } disabled?={ props.Disabled } class={ "checkbox" + conditionalClass(props.Item.Checked, " checkbox-success") }/>
			@itemQuantityBadge(props.Item.Quantity)
			<span class={ "break-all line-clamp-1" + conditionalClass(props.Item.Checked, " line-through") }>
				{ props.Item.Name }
			</span>
		}
		if !props.ViewMode {
			<div class="tooltip tooltip-left" data-tip="Delete">
				@common.Button("join-item btn-square").Attrs(templ.Attributes{
					"hx-delete": fmt.Sprintf("/api/groups/%s/lists/%s/items/%s", props.GroupID, props.Item.ListID, props.Item.ID),
					"hx-target": "#list-item-" + props.Item.ID,
					"hx-swap":   "delete",
				}).Neutral() {
					@components.IconTrash()
				}
			</div>
		}
	</div>
}

templ itemQuantityBadge(get func() (int, bool)) {
	if quantity, _ := get(); quantity > 0 {
		@common.Text(fmt.Sprint(quantity), "text-info", "text-lg")
	}
}

templ NewListItem(groupID, listID, itemsContainerSelector string, inputs, errors map[string]string) {
	<form class="sticky bottom-2 bg-neutral rounded-2xl shadow-xl flex flex-col items-center w-full" autocomplete="off" id="create-list-item-form">
		<div class="collapse p-2 pb-0">
			<input class="hidden" type="radio" id="add-new-item-expand-checkbox"/>
			<div id="create-list-item-form-name" class="join collapse-title min-h-fit p-0">
				<input
					name="name"
					type="text"
					minlength="1"
					maxlength="80"
					id="create-list-item-primary-input"
					onfocus="this.scrollIntoViewIfNeeded(true);"
					if _, hasErr := errors["name"]; !hasErr {
						value={ inputs["name"] }
					}
					placeholder={ logic.StringIfElse(errors["name"] != "", errors["name"], "bananas") }
					hx-on:input="event.target.classList.remove('input-error');event.target.placeholder='banana';"
					class={ "join-item input input-bordered w-full rounded-xl" + logic.StringIfElse(errors["name"] != "", " input-error", "") }
				/>
				@common.Button("join-item z-10 btn-square").Attrs(templ.Attributes{
					"hx-trigger":           "click",
					"hx-swap":              "beforeend",
					"hx-target":            "#" + itemsContainerSelector,
					"hx-post":              fmt.Sprintf("/api/groups/%s/lists/%s/items?container=%s", groupID, listID, itemsContainerSelector),
					"hx-on::after-request": afterPostRequestScript(),
				}).Primary() {
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
					</svg>
				}
			</div>
			<div class="collapse-content p-0 pb-2 rounded-xl flex flex-col mt-2 overflow-hidden" id="add-new-item-expanded">
				<div class="flex flex-row flex-wrap gap-2 grow">
					@form.TextInput("price", "Price", "2.99", inputs["price"], errors["price"], form.InlineLabel(), form.Max("80")).Render()
					@form.TextInput("quantity", "Quantity", "3", inputs["quantity"], errors["quantity"], form.InlineLabel(), form.Max("80"), form.Type("number")).Render()
				</div>
				<div id="create-list-item-form-description" class="flex flex-col text-neutral-content">
					@form.TextAreaInput("description", "Description", "only if it's on the 3rd shelf when counting from checkout #19", inputs["description"], errors["description"], form.Max("80")).Render()
				</div>
			</div>
		</div>
		<button
			type="button"
			onclick={ toggleMoreFields() }
			id="add-new-item-expand-button"
			class="link link-primary mb-2 -mt-2"
		>
			more fields
		</button>
	</form>
}

func afterPostRequestScript() string {
	return common.MinifyScript(`
		if (event.detail.xhr.status==201) {
			document.getElementById('create-list-item-form').querySelectorAll('[name]').forEach(e=>{e.value='';e.innterText='';})
			document.getElementById('list-empty-hint')?.remove()
		}`,
	)
}

script toggleMoreFields() {
	const hiddenCheckbox = document.getElementById('add-new-item-expand-checkbox')
	const expandedArea = document.getElementById('add-new-item-expanded')
	const button = document.getElementById('add-new-item-expand-button')
	const form = document.getElementById('create-list-item-form')
	if (hiddenCheckbox.checked) {
		hiddenCheckbox.checked = false
		button.innerText = "more fields"

		document.getElementById("create-list-item-primary-input")?.focus()
		form.scrollIntoViewIfNeeded(true)

		expandedArea.querySelectorAll("[name]").forEach(e => {
			e.innerText = ""
			e.value = ""
		})

	} else {
		hiddenCheckbox.checked = true
		button.innerText = "less fields"
		
		expandedArea.querySelector("[name]")?.focus()
		form.scrollIntoViewIfNeeded(true)
	}
}
