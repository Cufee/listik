package list

import "github.com/cufee/shopping-list/prisma/db"
import "fmt"
import "github.com/cufee/shopping-list/internal/templates/componenets/common"
import "github.com/cufee/shopping-list/internal/logic"

type ListItem struct {
	Item    *db.ListItemModel
	GroupID string
}

func conditionalClass(condition bool, class string) string {
	if condition {
		return class
	}
	return ""
}

templ (props ListItem) Render() {
	<div class="w-full join flex flex-row" id={ "list-item-" + props.Item.ID }>
		@common.Button("join-item shrink grow flex flex-row flex-nowrap gap-2 justify-start items-center").Attrs(templ.Attributes{
			"hx-swap":     "outerHTML",
			"hx-target":   "#list-item-" + props.Item.ID,
			"hx-selector": "#list-item-" + props.Item.ID,
			"hx-put":      fmt.Sprintf("/api/groups/%s/lists/%s/items/%s/checked/?checked=%t", props.GroupID, props.Item.ListID, props.Item.ID, !props.Item.Checked),
		}).Render() {
			<input name="checked" type="checkbox" checked?={ props.Item.Checked } class={ "checkbox" + conditionalClass(props.Item.Checked, " checkbox-success") }/>
			@itemQuantityBadge(props.Item.Quantity)
			<span class={ "break-all line-clamp-1" + conditionalClass(props.Item.Checked, " line-through") }>
				{ props.Item.Name }
			</span>
		}
		<div class="tooltip tooltip-left" data-tip="View Details">
			@common.Button("join-item btn-square").Neutral() {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
				</svg>
			}
		</div>
	</div>
}

templ itemQuantityBadge(get func() (int, bool)) {
	if quantity, _ := get(); quantity > 0 {
		@common.Text(fmt.Sprint(quantity), "text-info", "text-lg")
	}
}

templ NewListItem(groupID, listID, itemsContainerSelector string, inputs, errors map[string]string) {
	<form class="flex flex-col items-center" autocomplete="off" id="create-list-item-form">
		<div class="bg-base-200 rounded-xl collapse overflow-visible p-0">
			<input class="hidden" type="radio" id="add-new-item-expand-button"/>
			<div id="create-list-item-form-name" class="join collapse-title min-h-fit p-0">
				<input
					minlength="1"
					maxlength="80"
					type="text"
					name="name"
					if _, hasErr := errors["name"]; !hasErr {
						value={ inputs["name"] }
					}
					placeholder={ logic.StringIfElse(errors["name"] != "", errors["name"], "bananas") }
					class={ "join-item input input-bordered w-full rounded-xl" + logic.StringIfElse(errors["name"] != "", " input-error", "") }
					hx-on:input="event.target.classList.remove('input-error');event.target.placeholder='banana';"
				/>
				@common.Button("join-item z-10 btn-square").Attrs(templ.Attributes{
					"hx-post": fmt.Sprintf("/api/groups/%s/lists/%s/items?container=%s", groupID, listID, itemsContainerSelector),
					"hx-swap": "beforeend", "hx-trigger": "click",
					"hx-target": itemsContainerSelector,
				}).Primary() {
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
					</svg>
				}
			</div>
			<div class="collapse-content rounded-xl" id="add-new-item-expanded">
				<div class="flex flex-col rounded-xl border border-1 border-base-300 overflow-hidden mt-4 p-2">
					<span class="badge badge-info rounded-none rounded-bl-xl -m-2 mb-2 ml-auto">Optional</span>
					<div class="flex flex-row flex-wrap gap-2">
						<div class="form-control grow" id="create-list-item-form-price">
							<div class={ "input input-bordered flex gap-2 items-center" + logic.StringIfElse(errors["price"] != "", " input-error", "") }>
								Price
								<input
									type="text"
									name="price"
									maxlength="80"
									placeholder="2.99"
									aria-label="item price"
									class="grow text-right"
									value={ inputs["price"] }
									hx-on:input="document.querySelector('#create-list-item-form-price div').classList.remove('input-error');document.querySelector('#create-list-item-form-price .error')?.remove();"
								/>
							</div>
							if err, ok :=  errors["price"]; ok {
								<div class="label error">
									<span class="label-text-alt text-error">{ err }</span>
								</div>
							}
						</div>
						<div class="form-control grow" id="create-list-item-form-quantity">
							<div class={ "input input-bordered flex gap-2 items-center" + logic.StringIfElse(errors["quantity"] != "", " input-error", "") }>
								Quantity
								<input
									min="0"
									type="number"
									name="quantity"
									placeholder="3"
									aria-label="item quantity"
									class="grow text-right"
									value={ inputs["quantity"] }
									hx-on:input="document.querySelector('#create-list-item-form-quantity div').classList.remove('input-error');document.querySelector('#create-list-item-form-quantity .error')?.remove();"
								/>
							</div>
							if err, ok := errors["quantity"]; ok {
								<div class="label error">
									<span class="label-text-alt text-error">{ err }</span>
								</div>
							}
						</div>
					</div>
					<div id="create-list-item-form-description">
						<div class="form-control">
							<div class="label flex flex-row justify-between">
								<span class="label-text-alt text-lg">Description</span>
							</div>
							<textarea
								maxlength="80"
								type="text"
								name="description"
								aria-label="item description"
								placeholder="only if it's on the 3rd shelf when counting from checkout #19"
								class={ "textarea textarea-bordered" + logic.StringIfElse(errors["description"] != "", " textarea-error", "") }
								hx-on:input="event.target.classList.remove('textarea-error');document.querySelector('#create-list-item-form-description .error')?.remove()"
							>
								{ inputs["description"] }
							</textarea>
							if err, ok :=  errors["description"]; ok {
								<div class="label error">
									<span class="label-text-alt text-error">{ err }</span>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
		<button
			class="btn btn-link"
			onclick="this.remove();document.getElementById('add-new-item-expand-button').checked=true;document.querySelector('#add-new-item-expanded [name]')?.focus();"
		>
			expand
		</button>
	</form>
}
